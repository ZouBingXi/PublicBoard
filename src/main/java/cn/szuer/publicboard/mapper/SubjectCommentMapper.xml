<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="cn.szuer.publicboard.mapper.SubjectCommentMapper" >
  <resultMap id="BaseResultMap" type="cn.szuer.publicboard.model.SubjectComment" >
    <id column="commentID" property="commentid" jdbcType="INTEGER" />
    <id column="layerID" property="layerid" jdbcType="INTEGER" />
    <result column="subjectID" property="subjectid" jdbcType="INTEGER" />
    <result column="userID" property="userid" jdbcType="INTEGER" />
    <result column="commentTime" property="commenttime" jdbcType="TIMESTAMP" />
    <result column="likeNum" property="likenum" jdbcType="INTEGER" />
  </resultMap>
  <resultMap id="ResultMapWithBLOBs" type="cn.szuer.publicboard.model.SubjectComment" extends="BaseResultMap" >
    <result column="content" property="content" jdbcType="LONGVARCHAR" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    commentID, layerID, subjectID, userID, commentTime, likeNum
  </sql>
  <sql id="Blob_Column_List" >
    content
  </sql>
  <select id="selectByExampleWithBLOBs" resultMap="ResultMapWithBLOBs" parameterType="cn.szuer.publicboard.model.SubjectCommentExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from subject_comment
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="cn.szuer.publicboard.model.SubjectCommentExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from subject_comment
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="ResultMapWithBLOBs" parameterType="cn.szuer.publicboard.model.SubjectCommentKey" >
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from subject_comment
    where commentID = #{commentid,jdbcType=INTEGER}
      and layerID = #{layerid,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="cn.szuer.publicboard.model.SubjectCommentKey" >
    delete from subject_comment
    where commentID = #{commentid,jdbcType=INTEGER}
      and layerID = #{layerid,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="cn.szuer.publicboard.model.SubjectCommentExample" >
    delete from subject_comment
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="cn.szuer.publicboard.model.SubjectComment" >
    insert into subject_comment (commentID, layerID, subjectID, 
      userID, commentTime, likeNum, 
      content)
    values (#{commentid,jdbcType=INTEGER}, #{layerid,jdbcType=INTEGER}, #{subjectid,jdbcType=INTEGER}, 
      #{userid,jdbcType=INTEGER}, #{commenttime,jdbcType=TIMESTAMP}, #{likenum,jdbcType=INTEGER}, 
      #{content,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="cn.szuer.publicboard.model.SubjectComment" >
    insert into subject_comment
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="commentid != null" >
        commentID,
      </if>
      <if test="layerid != null" >
        layerID,
      </if>
      <if test="subjectid != null" >
        subjectID,
      </if>
      <if test="userid != null" >
        userID,
      </if>
      <if test="commenttime != null" >
        commentTime,
      </if>
      <if test="likenum != null" >
        likeNum,
      </if>
      <if test="content != null" >
        content,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="commentid != null" >
        #{commentid,jdbcType=INTEGER},
      </if>
      <if test="layerid != null" >
        #{layerid,jdbcType=INTEGER},
      </if>
      <if test="subjectid != null" >
        #{subjectid,jdbcType=INTEGER},
      </if>
      <if test="userid != null" >
        #{userid,jdbcType=INTEGER},
      </if>
      <if test="commenttime != null" >
        #{commenttime,jdbcType=TIMESTAMP},
      </if>
      <if test="likenum != null" >
        #{likenum,jdbcType=INTEGER},
      </if>
      <if test="content != null" >
        #{content,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="cn.szuer.publicboard.model.SubjectCommentExample" resultType="java.lang.Integer" >
    select count(*) from subject_comment
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update subject_comment
    <set >
      <if test="record.commentid != null" >
        commentID = #{record.commentid,jdbcType=INTEGER},
      </if>
      <if test="record.layerid != null" >
        layerID = #{record.layerid,jdbcType=INTEGER},
      </if>
      <if test="record.subjectid != null" >
        subjectID = #{record.subjectid,jdbcType=INTEGER},
      </if>
      <if test="record.userid != null" >
        userID = #{record.userid,jdbcType=INTEGER},
      </if>
      <if test="record.commenttime != null" >
        commentTime = #{record.commenttime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.likenum != null" >
        likeNum = #{record.likenum,jdbcType=INTEGER},
      </if>
      <if test="record.content != null" >
        content = #{record.content,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map" >
    update subject_comment
    set commentID = #{record.commentid,jdbcType=INTEGER},
      layerID = #{record.layerid,jdbcType=INTEGER},
      subjectID = #{record.subjectid,jdbcType=INTEGER},
      userID = #{record.userid,jdbcType=INTEGER},
      commentTime = #{record.commenttime,jdbcType=TIMESTAMP},
      likeNum = #{record.likenum,jdbcType=INTEGER},
      content = #{record.content,jdbcType=LONGVARCHAR}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update subject_comment
    set commentID = #{record.commentid,jdbcType=INTEGER},
      layerID = #{record.layerid,jdbcType=INTEGER},
      subjectID = #{record.subjectid,jdbcType=INTEGER},
      userID = #{record.userid,jdbcType=INTEGER},
      commentTime = #{record.commenttime,jdbcType=TIMESTAMP},
      likeNum = #{record.likenum,jdbcType=INTEGER}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="cn.szuer.publicboard.model.SubjectComment" >
    update subject_comment
    <set >
      <if test="subjectid != null" >
        subjectID = #{subjectid,jdbcType=INTEGER},
      </if>
      <if test="userid != null" >
        userID = #{userid,jdbcType=INTEGER},
      </if>
      <if test="commenttime != null" >
        commentTime = #{commenttime,jdbcType=TIMESTAMP},
      </if>
      <if test="likenum != null" >
        likeNum = #{likenum,jdbcType=INTEGER},
      </if>
      <if test="content != null" >
        content = #{content,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where commentID = #{commentid,jdbcType=INTEGER}
      and layerID = #{layerid,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="cn.szuer.publicboard.model.SubjectComment" >
    update subject_comment
    set subjectID = #{subjectid,jdbcType=INTEGER},
      userID = #{userid,jdbcType=INTEGER},
      commentTime = #{commenttime,jdbcType=TIMESTAMP},
      likeNum = #{likenum,jdbcType=INTEGER},
      content = #{content,jdbcType=LONGVARCHAR}
    where commentID = #{commentid,jdbcType=INTEGER}
      and layerID = #{layerid,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="cn.szuer.publicboard.model.SubjectComment" >
    update subject_comment
    set subjectID = #{subjectid,jdbcType=INTEGER},
      userID = #{userid,jdbcType=INTEGER},
      commentTime = #{commenttime,jdbcType=TIMESTAMP},
      likeNum = #{likenum,jdbcType=INTEGER}
    where commentID = #{commentid,jdbcType=INTEGER}
      and layerID = #{layerid,jdbcType=INTEGER}
  </update>
</mapper>